import { useState } from 'react';
import { Kedai, MenuMakanan, BuyerInfo } from '../types';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '../components/ui/dialog';
import { Button } from '../components/ui/button';
import { Input } from '../components/ui/input';
import { Textarea } from '../components/ui/textarea';
import { Plus, Minus, MapPin, ShoppingCart } from 'lucide-react';

interface KedaiMenuPageProps {
  kedai: Kedai;
  onBack: () => void;
}

const KedaiMenuPage: React.FC<KedaiMenuPageProps> = ({ kedai, onBack }) => {
  const [selectedMenu, setSelectedMenu] = useState<MenuMakanan | null>(
    kedai.menu_makanan && kedai.menu_makanan.length > 0 ? kedai.menu_makanan[0] : null
  );
  const [showOrderModal, setShowOrderModal] = useState(false);
  const [menuQuantities, setMenuQuantities] = useState<Record<string, number>>({});
  const [buyerInfo, setBuyerInfo] = useState<BuyerInfo>({
    nama: '',
    alamat: ''
  });

  const handleMenuSelect = (menu: MenuMakanan) => {
    setSelectedMenu(menu);
  };

  const handleOpenOrderModal = () => {
    // Initialize quantities for all menu items to 0
    const initialQuantities: Record<string, number> = {};
    if (kedai.menu_makanan) {
      kedai.menu_makanan.forEach(menu => {
        initialQuantities[menu.id] = 0;
      });
    }
    setMenuQuantities(initialQuantities);
    setShowOrderModal(true);
  };

  const handleDecreaseQuantity = (menuId: string, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    
    setMenuQuantities(prev => {
      const currentQty = prev[menuId] || 0;
      const newQty = Math.max(0, currentQty - 1);
      
      return {
        ...prev,
        [menuId]: newQty
      };
    });
  };

  const handleIncreaseQuantity = (menuId: string, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    
    setMenuQuantities(prev => {
      const currentQty = prev[menuId] || 0;
      return {
        ...prev,
        [menuId]: currentQty + 1
      };
    });
  };

  const handleShareLocation = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setBuyerInfo({
            ...buyerInfo,
            lokasi: {
              lat: position.coords.latitude,
              lon: position.coords.longitude
            }
          });
        },
        (error) => {
          console.error('Error getting location:', error);
          alert('Gagal mendapatkan lokasi. Pastikan Anda mengizinkan akses lokasi.');
        }
      );
    } else {
      alert('Browser Anda tidak mendukung geolokasi.');
    }
  };

  const calculateTotalPrice = () => {
    let total = 0;
    if (kedai.menu_makanan) {
      kedai.menu_makanan.forEach(menu => {
        total += menu.harga * (menuQuantities[menu.id] || 0);
      });
    }
    return total;
  };

  const handleSendOrder = () => {
    // Validasi input
    if (!buyerInfo.nama.trim()) {
      alert('Silakan masukkan nama Anda');
      return;
    }
    
    if (!buyerInfo.alamat.trim() && !buyerInfo.lokasi) {
      alert('Silakan masukkan alamat atau bagikan lokasi Anda');
      return;
    }

    // Validasi pesanan
    const totalItems = Object.values(menuQuantities).reduce((sum, qty) => sum + qty, 0);
    if (totalItems === 0) {
      alert('Silakan pilih minimal satu menu');
      return;
    }
    
    // Hitung total harga
    const totalHarga = calculateTotalPrice();
    
    // Format pesan WhatsApp
    let message = `*Pesanan Baru - ${kedai.nama_kedai}*\n-----------------------------------\n`;
    message += `*Detail Menu:*\n`;
    
    // Tambahkan detail menu yang dipesan
    if (kedai.menu_makanan) {
      kedai.menu_makanan.forEach(menu => {
        const quantity = menuQuantities[menu.id] || 0;
        if (quantity > 0) {
          message += `- ${menu.nama_makanan} (${quantity}x): Rp ${(menu.harga * quantity).toLocaleString('id-ID')}\n`;
        }
      });
    }
    
    message += `\n*Total Harga:* Rp ${totalHarga.toLocaleString('id-ID')}\n`;
    message += `*Ongkir:* Rp ${kedai.ongkir_tetap.toLocaleString('id-ID')}\n`;
    message += `*Total Pembayaran:* Rp ${(totalHarga + kedai.ongkir_tetap).toLocaleString('id-ID')}\n\n`;
    message += `*Nama Pembeli:* ${buyerInfo.nama}\n`;
    message += `*Alamat:* ${buyerInfo.alamat}\n`;
    
    // Tambahkan link Google Maps jika ada lokasi
    if (buyerInfo.lokasi) {
      const mapsLink = `https://www.google.com/maps?q=${buyerInfo.lokasi.lat},${buyerInfo.lokasi.lon}`;
      message += `*Lokasi:* ${mapsLink}\n`;
    }
    
    message += `-----------------------------------\nMohon segera diproses. Terima kasih!`;
    
    // Encode pesan untuk URL WhatsApp
    const encodedMessage = encodeURIComponent(message);
    
    // Nomor WhatsApp admin (gunakan nomor dari database jika tersedia)
    const adminPhoneNumber = '6283844736762'; // Ganti dengan nomor admin yang sebenarnya
    
    // Buat URL WhatsApp
    const whatsappUrl = `https://wa.me/${adminPhoneNumber}?text=${encodedMessage}`;
    
    // Buka WhatsApp di tab baru
    window.open(whatsappUrl, '_blank');
    
    // Tutup modal setelah mengirim pesanan
    setShowOrderModal(false);
  };

  return (
    <div className="min-h-screen bg-[#F5F5F5] text-gray-900 font-sans">
      <header className="relative rounded-b-3xl overflow-hidden pb-4" style={{ background: 'linear-gradient(to bottom, #EE4D2D, #FF7337)' }}>
        <div className="relative z-10 p-4 pt-8 text-center">
          <button 
            onClick={onBack}
            className="absolute left-4 top-4 bg-white/20 hover:bg-white/30 text-white rounded-full p-2 transition-colors"
          >
            ← Kembali
          </button>
          <h1 className="text-xl font-bold text-white">{kedai.nama_kedai}</h1>
        </div>
      </header>

      <main className="space-y-4 max-w-4xl mx-auto relative z-20 px-3">
        {/* Large Food Image */}
        <section className="bg-white rounded-t-xl shadow-sm overflow-hidden">
          <div className="w-full h-64 relative">
            {selectedMenu ? (
              <img 
                src={selectedMenu.foto_makanan_url} 
                alt={selectedMenu.nama_makanan}
                className="w-full h-full object-cover"
                onError={(e) => {
                  const target = e.target as HTMLImageElement;
                  target.src = '/assets/icons_new/default_kedai.jpeg';
                }}
              />
            ) : (
              <img 
                src={kedai.foto_url} 
                alt={kedai.nama_kedai}
                className="w-full h-full object-cover"
                onError={(e) => {
                  const target = e.target as HTMLImageElement;
                  target.src = '/assets/icons_new/default_kedai.jpeg';
                }}
              />
            )}
          </div>
          
          {/* Menu Description */}
          <div className="p-4">
            <h2 className="text-lg font-medium text-gray-900">
              {selectedMenu ? selectedMenu.nama_makanan : kedai.nama_kedai}
            </h2>
            <p className="text-sm text-gray-600 mt-1">
              {selectedMenu ? selectedMenu.deskripsi_makanan : kedai.deskripsi_singkat}
            </p>
            {selectedMenu && (
              <div className="mt-2 text-lg font-bold text-orange-600">
                Rp {selectedMenu.harga.toLocaleString('id-ID')}
              </div>
            )}
          </div>
          
          {/* Horizontal Menu Selector */}
          <div className="border-t border-gray-100 pt-3 pb-4 px-2">
            <h3 className="text-sm font-medium text-gray-700 mb-2 px-2">Pilih Menu:</h3>
            <div className="overflow-x-auto pb-2">
              <div className="flex space-x-2 px-2 min-w-max">
                {kedai.menu_makanan && kedai.menu_makanan.map((menu) => (
                  <div 
                    key={menu.id} 
                    className={`flex-shrink-0 w-28 border rounded-md overflow-hidden cursor-pointer transition-all ${
                      selectedMenu?.id === menu.id ? 'border-orange-500 shadow-sm' : 'border-gray-200'
                    }`}
                    onClick={() => handleMenuSelect(menu)}
                  >
                    <div className="h-20 w-full">
                      <img 
                        src={menu.foto_makanan_url} 
                        alt={menu.nama_makanan}
                        className="w-full h-full object-cover"
                        onError={(e) => {
                          const target = e.target as HTMLImageElement;
                          target.src = '/assets/icons_new/default_kedai.jpeg';
                        }}
                      />
                    </div>
                    <div className="p-2">
                      <p className="text-xs font-medium text-gray-900 line-clamp-1">{menu.nama_makanan}</p>
                      <p className="text-xs text-orange-600 mt-1">Rp {menu.harga.toLocaleString('id-ID')}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
          
          {/* Kedai Address and Order Button */}
          <div className="border-t border-gray-100 p-4">
            <div className="mb-3">
              <h3 className="text-sm font-medium text-gray-700">Alamat Kedai:</h3>
              <p className="text-sm text-gray-600 mt-1">{kedai.alamat || "Alamat tidak tersedia"}</p>
            </div>
            <Button 
              className="w-full bg-orange-500 hover:bg-orange-600 text-white py-2"
              onClick={handleOpenOrderModal}
            >
              Pesan
            </Button>
          </div>
        </section>
      </main>

      <footer className="text-center mt-8 py-4 text-gray-500 text-xs border-t border-gray-300">
        © {new Date().getFullYear()} RNJ. All rights reserved.
      </footer>

      {/* Order Modal */}
      <Dialog open={showOrderModal} onOpenChange={setShowOrderModal}>
        <DialogContent className="sm:max-w-md max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="text-center">
              Pemesanan - {kedai.nama_kedai}
            </DialogTitle>
          </DialogHeader>
          
          <div className="mt-2">
            {/* Menu List with Quantity Controls */}
            <div className="mb-4">
              <h3 className="text-sm font-medium text-gray-700 mb-2">Pilih Menu:</h3>
              <div className="space-y-2 max-h-60 overflow-y-auto pr-1">
                {kedai.menu_makanan && kedai.menu_makanan.map((menu) => (
                  <div key={menu.id} className="flex items-center justify-between border border-gray-200 rounded-md p-2">
                    <div className="flex items-center space-x-2">
                      <div className="w-12 h-12 flex-shrink-0">
                        <img 
                          src={menu.foto_makanan_url} 
                          alt={menu.nama_makanan}
                          className="w-full h-full object-cover rounded-md"
                          onError={(e) => {
                            const target = e.target as HTMLImageElement;
                            target.src = '/assets/icons_new/default_kedai.jpeg';
                          }}
                        />
                      </div>
                      <div>
                        <p className="text-sm font-medium text-gray-900">{menu.nama_makanan}</p>
                        <p className="text-xs text-orange-600">Rp {menu.harga.toLocaleString('id-ID')}</p>
                      </div>
                    </div>
                    <div className="flex items-center">
                      <button 
                        type="button"
                        className="bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-l-md p-1"
                        onClick={(e) => handleDecreaseQuantity(menu.id, e)}
                      >
                        <Minus className="h-4 w-4" />
                      </button>
                      <div className="w-8 text-center py-1 border-t border-b border-gray-300">
                        {menuQuantities[menu.id] || 0}
                      </div>
                      <button 
                        type="button"
                        className="bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-r-md p-1"
                        onClick={(e) => handleIncreaseQuantity(menu.id, e)}
                      >
                        <Plus className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
            
            {/* Total Price */}
            <div className="mb-4 bg-orange-50 p-3 rounded-md">
              <div className="flex justify-between items-center">
                <span className="text-sm text-gray-700">Total Harga:</span>
                <span className="text-sm font-medium">Rp {calculateTotalPrice().toLocaleString('id-ID')}</span>
              </div>
              <div className="flex justify-between items-center mt-1">
                <span className="text-sm text-gray-700">Ongkir:</span>
                <span className="text-sm font-medium">Rp {kedai.ongkir_tetap.toLocaleString('id-ID')}</span>
              </div>
              <div className="border-t border-orange-200 my-2"></div>
              <div className="flex justify-between items-center">
                <span className="text-sm font-medium text-gray-700">Total Pembayaran:</span>
                <span className="text-sm font-bold text-orange-600">
                  Rp {(calculateTotalPrice() + kedai.ongkir_tetap).toLocaleString('id-ID')}
                </span>
              </div>
            </div>
            
            {/* Buyer Info */}
            <div className="space-y-3">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Nama Pembeli
                </label>
                <Input 
                  placeholder="Masukkan nama Anda"
                  value={buyerInfo.nama}
                  onChange={(e) => setBuyerInfo({...buyerInfo, nama: e.target.value})}
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Alamat Pengiriman
                </label>
                <Textarea 
                  placeholder="Masukkan alamat lengkap Anda"
                  value={buyerInfo.alamat}
                  onChange={(e) => setBuyerInfo({...buyerInfo, alamat: e.target.value})}
                  className="resize-none"
                  rows={3}
                />
              </div>
              
              <Button 
                variant="outline" 
                className="w-full flex items-center justify-center gap-2"
                onClick={handleShareLocation}
              >
                <MapPin className="h-4 w-4" />
                <span>Share Lokasi</span>
              </Button>
              
              {buyerInfo.lokasi && (
                <div className="text-xs text-green-600 italic">
                  Lokasi berhasil dibagikan! Koordinat: {buyerInfo.lokasi.lat.toFixed(6)}, {buyerInfo.lokasi.lon.toFixed(6)}
                </div>
              )}
            </div>
            
            <div className="mt-6 mb-2">
              <Button 
                className="w-full bg-orange-500 hover:bg-orange-600 flex items-center justify-center gap-2"
                onClick={handleSendOrder}
              >
                <ShoppingCart className="h-4 w-4" />
                <span>Pesan Sekarang</span>
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default KedaiMenuPage;
