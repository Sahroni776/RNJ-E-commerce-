import { useState } from 'react'; // Removed unused React import
import './index.css'; // Ensure Tailwind base styles are imported
// import ServiceCard from './components/ServiceCard'; // Removed unused import
import HomeServiceItem from './components/HomeServiceItem'; // Import the new component
import OrderFormGeneric from './components/OrderFormGeneric';
import OrderFormFood from './components/OrderFormFood';
import OrderFormMarket from './components/OrderFormMarket';
// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'; // Removed unused import
import { faHome, /*faTools,*/ faUtensils, faPaintRoller, faWrench, faTshirt, faChair, faConciergeBell, faBirthdayCake, faShoppingBasket, faGlassWhiskey, faLeaf, faBan/*, IconDefinition*/ } from '@fortawesome/free-solid-svg-icons'; // Removed faMotorcycle, added IconDefinition, removed faTools, IconDefinition

// Define services with categories and icons
const services = {
  'Home Services': [
    { name: 'Servis Kompor', icon: faWrench, formType: 'generic' },
    { name: 'Bersih Rumah', icon: faHome, formType: 'generic' },
    { name: 'Bersih Kebun', icon: faLeaf, formType: 'generic' },
    { name: 'Cat Rumah', icon: faPaintRoller, formType: 'generic' },
    { name: 'Tambal Ban', icon: faBan, formType: 'generic' },
  ],
  'Craft & Custom Services': [
    { name: 'Sablon Baju', icon: faTshirt, formType: 'generic' },
    { name: 'Mebel', icon: faChair, formType: 'generic' },
    { name: 'Katering', icon: faConciergeBell, formType: 'generic' },
    { name: 'Kue Tar / Tumpeng', icon: faBirthdayCake, formType: 'generic' },
  ],
  'Food & Beverage': [
    { name: 'Belanja ke Pasar', icon: faShoppingBasket, formType: 'market' },
    { name: 'Pesan Makan', icon: faUtensils, formType: 'food' },
    { name: 'Pesan Minum', icon: faGlassWhiskey, formType: 'drink' },
    { name: 'Beli Jamu', icon: faLeaf, formType: 'generic' },
  ],
};

// Category Icons with Index Signature (Removed unused variable)
// const categoryIcons: { [key: string]: IconDefinition } = {
//   'Home Services': faTools,
//   'Craft & Custom Services': faTshirt,
//   'Food & Beverage': faUtensils,
// };

// Food & Drink Menu Items (Add more drinks if needed)
const foodMenuItems = [
  'Bakso', 'Nasi Goreng', 'Mie Ayam', 'Seblak', 'Angsle', 'Gorengan', 'Cihu', 'Martabak Manis', 'Martabak Telur', 'Roti Bakar', 'Somay', 'Tela Tela', 'Pentol', 'Cilok', 'Ayam Geprek', 'Ayam Bakar', 'Lalapan Ikan', 'Batagor', 'Campur', 'Rujak', 'Pecel', 'Nasi Kuning', 'Sate Ayam', 'Sate Kambing', 'Sate Sapi', 'Tahu Walik', 'Ayam Krispi', 'Ketan', 'Tape', 'Rawon', 'Soto', 'Nasi Belut', 'Tahu Sumedang', 'Pisang Kipas', 'Nasi Jagung', 'Nasi Campur', 'Nasi Rames', 'Gurame', 'Ikan Kakap', 'Ikan Lele', 'Kepiting', 'Ikan Nila', 'Rujak Cingur', 'Gule'
];
const drinkMenuItems = [
  'Es Teh', 'Es Jeruk', 'Kopi Hitam', 'Kopi Susu', 'Jus Alpukat', 'Jus Mangga', 'Air Mineral', 'Es Buah', 'Es Cincau', 'Es Dawet', 'Es Goder', 'Es Kelapa Muda', 'Tea', 'Susu', 'Jus Buah', 'Wedang Jahe', 'Es Milo', 'Capucino', 'Lemon Tea', 'Jasmine Tea', 'Minuman Mixue'
];

function App() {
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [currentService, setCurrentService] = useState<{ name: string; formType: string } | null>(null);

  const handleCardClick = (serviceName: string, formType: string) => {
    setCurrentService({ name: serviceName, formType });
    setIsFormOpen(true);
  };

  const handleCloseForm = () => {
    setIsFormOpen(false);
    setCurrentService(null);
  };

  const handleFormSubmit = (formData: any) => {
    const adminPhoneNumber = '6283844736762'; // Indonesian country code + number without leading 0
    let message = `*Pemesanan Baru - ${formData.serviceName}*\n-----------------------------------\n`;

    message += `Nama: ${formData.name}\n`;
    message += `Alamat: ${formData.address}\n`;

    // Determine formType from formData if available, otherwise use currentService
    const formType = formData.formType || currentService?.formType;

    if (formType === 'food' || formType === 'drink') {
      message += `Menu: ${formData.selectedItem}\n`;
    }

    if (formType === 'market') {
      message += `Daftar Belanja:\n${formData.shoppingList}\n`;
    }

    if (formData.notes) {
      message += `Catatan: ${formData.notes}\n`;
    }

    if (formData.location) {
      const mapsLink = `https://www.google.com/maps?q=${formData.location.lat},${formData.location.lon}`;
      message += `Lokasi: ${mapsLink}\n`;
    }
    message += `-----------------------------------\nMohon segera diproses. Terima kasih!`;

    const encodedMessage = encodeURIComponent(message);
    const whatsappUrl = `https://wa.me/${adminPhoneNumber}?text=${encodedMessage}`;

    // Open WhatsApp link in a new tab
    window.open(whatsappUrl, '_blank');

    // Close the form after attempting to send
    handleCloseForm();
  };

  const renderForm = () => {
    if (!isFormOpen || !currentService) return null;

    const { name, formType } = currentService;

    switch (formType) {
      case 'generic':
        return <OrderFormGeneric serviceName={name} onClose={handleCloseForm} onSubmit={handleFormSubmit} />;
      case 'food':
        return <OrderFormFood serviceName={name} menuItems={foodMenuItems} formType="food" onClose={handleCloseForm} onSubmit={handleFormSubmit} />;
      case 'drink':
        // Assuming 'Pesan Minum' uses the same form structure as 'Pesan Makan' but with drink items
        return <OrderFormFood serviceName={name} menuItems={drinkMenuItems} formType="drink" onClose={handleCloseForm} onSubmit={handleFormSubmit} />;
      case 'market':
        return <OrderFormMarket serviceName={name} onClose={handleCloseForm} onSubmit={handleFormSubmit} />;
      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-[#F5F5F5] text-gray-900 p-4 md:p-8 font-sans">
      <header className="text-center mb-8 md:mb-12">
        {/* Optional: Add a logo here if provided */}
        <h1 className="text-4xl md:text-5xl font-bold text-teal-600 mb-2 tracking-tight">RNJ</h1>
        <p className="text-lg md:text-xl text-gray-600">Solusi Kebutuhan Harian Anda</p>
      </header>

      <main className="space-y-10 max-w-6xl mx-auto">
        {Object.entries(services).map(([category, items]) => {
          // Apply CardView layout to all categories
          return (
            <section key={category} className="mb-8">
              <div className="bg-white shadow-md rounded-xl p-4 md:p-6 transition-shadow duration-300 ease-in-out hover:shadow-xl">
                {/* Title - Adjusted size to text-sm (~14px) */}
                <h2 className="text-sm font-semibold text-gray-700 mb-4 text-left">{category}</h2>
                {/* Grid for service items - Responsive columns */}
                <div className="grid grid-cols-3 sm:grid-cols-4 lg:grid-cols-5 gap-4 md:gap-6">
                  {items.map((service) => (
                    <HomeServiceItem
                      key={service.name}
                      icon={service.icon}
                      title={service.name}
                      // index={index} // Removed as unused
                      onClick={() => handleCardClick(service.name, service.formType)}
                    />
                  ))}
                </div>
              </div>
            </section>
          );
        })}
      </main>

      <footer className="text-center mt-12 py-6 text-gray-500 text-sm border-t border-gray-700">
        Â© {new Date().getFullYear()} RNJ. All rights reserved.
      </footer>

      {/* Render the currently active form */} 
      {renderForm()}
    </div>
  );
}

export default App;

